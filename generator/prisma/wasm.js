
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AttendanceScalarFieldEnum = {
  attendanceId: 'attendanceId',
  employeeId: 'employeeId',
  eventId: 'eventId',
  datetime: 'datetime',
  method: 'method',
  status: 'status',
  checkIn: 'checkIn',
  checkOut: 'checkOut',
  note: 'note',
  createdAt: 'createdAt'
};

exports.Prisma.AuthScalarFieldEnum = {
  authId: 'authId',
  email: 'email',
  password: 'password',
  roleId: 'roleId',
  employeeId: 'employeeId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLoginAt: 'lastLoginAt'
};

exports.Prisma.EmployeeScalarFieldEnum = {
  employeeId: 'employeeId',
  employeeCode: 'employeeCode',
  firstName: 'firstName',
  lastName: 'lastName',
  gender: 'gender',
  dob: 'dob',
  phone: 'phone',
  position: 'position',
  department: 'department',
  salary: 'salary',
  hiredDate: 'hiredDate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventScalarFieldEnum = {
  eventId: 'eventId',
  eventName: 'eventName',
  memo: 'memo',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QRCodeScalarFieldEnum = {
  token: 'token',
  eventId: 'eventId',
  eventName: 'eventName',
  qrCode: 'qrCode',
  expiresAt: 'expiresAt',
  oneTimeUse: 'oneTimeUse',
  isActive: 'isActive',
  scans: 'scans',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  qrId: 'qrId'
};

exports.Prisma.LeaveRequestScalarFieldEnum = {
  leaveId: 'leaveId',
  employeeId: 'employeeId',
  leaveType: 'leaveType',
  startDate: 'startDate',
  endDate: 'endDate',
  reason: 'reason',
  status: 'status',
  approvedById: 'approvedById',
  approvedAt: 'approvedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoleScalarFieldEnum = {
  roleId: 'roleId',
  roleName: 'roleName'
};

exports.Prisma.AddressScalarFieldEnum = {
  addressId: 'addressId',
  street: 'street',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  country: 'country',
  employeeId: 'employeeId',
  eventId: 'eventId'
};

exports.Prisma.TokenScalarFieldEnum = {
  tokenId: 'tokenId',
  token: 'token',
  expires: 'expires',
  authId: 'authId'
};

exports.Prisma.AuthLogScalarFieldEnum = {
  logId: 'logId',
  action: 'action',
  metadata: 'metadata',
  ip: 'ip',
  userAgent: 'userAgent',
  message: 'message',
  method: 'method',
  authId: 'authId',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  notificationId: 'notificationId',
  message: 'message',
  title: 'title',
  read: 'read',
  type: 'type',
  createdAt: 'createdAt',
  authId: 'authId'
};

exports.Prisma.CustomerScalarFieldEnum = {
  customerId: 'customerId',
  employeeId: 'employeeId'
};

exports.Prisma.EmployeeinfoScalarFieldEnum = {
  infoId: 'infoId',
  employeeId: 'employeeId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ScanMethod = exports.$Enums.ScanMethod = {
  phone: 'phone',
  biometric: 'biometric'
};

exports.Status = exports.$Enums.Status = {
  active: 'active',
  inactive: 'inactive',
  deleted: 'deleted'
};

exports.AccountStatus = exports.$Enums.AccountStatus = {
  active: 'active',
  inactive: 'inactive',
  suspended: 'suspended',
  deleted: 'deleted'
};

exports.Gender = exports.$Enums.Gender = {
  male: 'male',
  female: 'female',
  other: 'other'
};

exports.LeaveType = exports.$Enums.LeaveType = {
  annual: 'annual',
  sick: 'sick',
  maternity: 'maternity',
  paternity: 'paternity',
  unpaid: 'unpaid',
  other: 'other'
};

exports.LeaveStatus = exports.$Enums.LeaveStatus = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected',
  cancelled: 'cancelled'
};

exports.Prisma.ModelName = {
  Attendance: 'Attendance',
  Auth: 'Auth',
  Employee: 'Employee',
  Event: 'Event',
  QRCode: 'QRCode',
  LeaveRequest: 'LeaveRequest',
  Role: 'Role',
  Address: 'Address',
  Token: 'Token',
  AuthLog: 'AuthLog',
  Notification: 'Notification',
  Customer: 'Customer',
  Employeeinfo: 'Employeeinfo'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
