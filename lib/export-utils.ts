import * as XLSX from "xlsx";

// Professional PDF generation with proper error handling
export async function downloadPDF(
  data: any[],
  filename: string,
  reportType = "Attendance Report"
) {
  try {
    // Dynamic import to avoid SSR issues
    const jsPDF = (await import("jspdf")).default;
    const autoTable = (await import("jspdf-autotable")).default;

    const doc = new jsPDF({
      orientation: "landscape",
      unit: "mm",
      format: "a4",
    });

    // Company branding
    doc.setFillColor(59, 130, 246); // Blue header
    doc.rect(0, 0, 297, 25, "F");

    // Company logo area (you can add actual logo here)
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(24);
    doc.setFont("helvetica", "bold");
    doc.text("AttendanceHub", 20, 17);

    // Report title
    doc.setTextColor(40, 40, 40);
    doc.setFontSize(18);
    doc.setFont("helvetica", "bold");
    doc.text(reportType, 20, 40);

    // Report metadata
    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    doc.setTextColor(100, 100, 100);

    const currentDate = new Date().toLocaleString();
    const reportInfo = [
      `Generated: ${currentDate}`,
      `Total Records: ${data.length}`,
      `Report ID: RPT-${Date.now()}`,
      `Generated by: AttendanceHub System`,
    ];

    reportInfo.forEach((info, index) => {
      doc.text(info, 20, 50 + index * 5);
    });

    // Add separator line
    doc.setDrawColor(200, 200, 200);
    doc.setLineWidth(0.5);
    doc.line(20, 75, 277, 75);

    if (data.length === 0) {
      doc.setFontSize(14);
      doc.setTextColor(150, 150, 150);
      doc.text("No data available for the selected criteria.", 20, 90);
    } else {
      // Prepare table data with better formatting
      const headers = Object.keys(data[0]);
      const rows = data.map((item) =>
        headers.map((header) => {
          const value = item[header];
          if (value === null || value === undefined) return "";
          if (typeof value === "string" && value.length > 30) {
            return value.substring(0, 27) + "...";
          }
          return String(value);
        })
      );

      // Create professional table
      autoTable(doc, {
        head: [headers],
        body: rows,
        startY: 85,
        theme: "grid",
        styles: {
          fontSize: 8,
          cellPadding: 2,
          overflow: "linebreak",
          halign: "left",
        },
        headStyles: {
          fillColor: [59, 130, 246],
          textColor: [255, 255, 255],
          fontStyle: "bold",
          fontSize: 9,
        },
        alternateRowStyles: {
          fillColor: [248, 250, 252],
        },
        columnStyles: {
          0: { cellWidth: 25 }, // Employee Code
          1: { cellWidth: 35 }, // Employee Name
          2: { cellWidth: 25 }, // Department
          3: { cellWidth: 30 }, // Position
          4: { cellWidth: 30 }, // Event
          5: { cellWidth: 25 }, // Check In
          6: { cellWidth: 25 }, // Check Out
          7: { cellWidth: 20 }, // Work Hours
          8: { cellWidth: 15 }, // Method
        },
        margin: { top: 85, left: 20, right: 20 },
        didDrawPage: (data) => {
          // Add page numbers and footer
          const pageCount = doc.getNumberOfPages();
          const pageSize = doc.internal.pageSize;

          // Footer
          doc.setFontSize(8);
          doc.setTextColor(150, 150, 150);
          doc.text(
            `Page ${data.pageNumber} of ${pageCount}`,
            pageSize.width - 40,
            pageSize.height - 10
          );
          doc.text(
            "AttendanceHub - Confidential Document",
            20,
            pageSize.height - 10
          );
        },
      });

      // Add summary section on last page
      const finalY = (doc as any).lastAutoTable.finalY + 20;

      doc.setFontSize(12);
      doc.setFont("helvetica", "bold");
      doc.setTextColor(40, 40, 40);
      doc.text("Report Summary", 20, finalY);

      doc.setFontSize(10);
      doc.setFont("helvetica", "normal");
      doc.setTextColor(100, 100, 100);

      const summary = [
        `Total Attendance Records: ${data.length}`,
        `Unique Employees: ${
          new Set(data.map((d) => d["Employee Code"])).size
        }`,
        `Report Period: ${data.length > 0 ? "Custom Range" : "No Data"}`,
        `Export Format: PDF Document`,
      ];

      summary.forEach((item, index) => {
        doc.text(item, 20, finalY + 10 + index * 5);
      });
    }

    // Save the PDF
    doc.save(`${filename}.pdf`);
    return true;
  } catch (error) {
    console.error("PDF generation error:", error);
    throw new Error("Failed to generate PDF. Please try again.");
  }
}

// Professional Excel export with advanced formatting
export function downloadExcel(
  data: any[],
  filename: string,
  reportType = "Attendance Report"
) {
  try {
    if (data.length === 0) {
      throw new Error("No data to export");
    }

    // Create workbook
    const wb = XLSX.utils.book_new();

    // Create cover sheet
    const coverData = [
      ["ATTENDANCEHUB"],
      ["Professional Attendance Management System"],
      [""],
      ["REPORT DETAILS"],
      ["Report Type:", reportType],
      ["Generated On:", new Date().toLocaleString()],
      ["Total Records:", data.length],
      ["Unique Employees:", new Set(data.map((d) => d["Employee Code"])).size],
      ["Report ID:", `RPT-${Date.now()}`],
      [""],
      ["SUMMARY STATISTICS"],
      [
        "Active Sessions:",
        data.filter((d) => d["Check Out"] === "Still Active").length,
      ],
      [
        "Completed Sessions:",
        data.filter((d) => d["Check Out"] !== "Still Active").length,
      ],
      ["Average Work Hours:", calculateAverageHours(data)],
      [""],
      ["DEPARTMENT BREAKDOWN"],
      ...getDepartmentBreakdown(data),
      [""],
      ["NOTES"],
      ["• This report contains confidential employee data"],
      ["• All times are in local timezone"],
      ["• Work hours calculated automatically"],
      ["• Generated by AttendanceHub System"],
    ];

    const coverWs = XLSX.utils.aoa_to_sheet(coverData);

    // Style the cover sheet
    const coverRange = XLSX.utils.decode_range(coverWs["!ref"] || "A1");

    // Set column widths
    coverWs["!cols"] = [{ wch: 25 }, { wch: 35 }];

    // Add the cover sheet
    XLSX.utils.book_append_sheet(wb, coverWs, "📊 Report Summary");

    // Create main data worksheet with professional formatting
    const ws = XLSX.utils.json_to_sheet(data);

    // Enhanced column widths based on content
    const colWidths = Object.keys(data[0]).map((key) => {
      const maxLength = Math.max(
        key.length,
        ...data.map((row) => String(row[key] || "").length)
      );
      return { wch: Math.min(Math.max(maxLength + 2, 12), 30) };
    });
    ws["!cols"] = colWidths;

    // Add filters to the data
    const dataRange = XLSX.utils.decode_range(ws["!ref"] || "A1");
    ws["!autofilter"] = { ref: ws["!ref"] || "A1" };

    // Add the main data sheet
    XLSX.utils.book_append_sheet(wb, ws, "📋 Attendance Data");

    // Create department analysis sheet
    const deptAnalysis = createDepartmentAnalysis(data);
    const deptWs = XLSX.utils.json_to_sheet(deptAnalysis);
    deptWs["!cols"] = [
      { wch: 20 }, // Department
      { wch: 15 }, // Total Records
      { wch: 15 }, // Unique Employees
      { wch: 18 }, // Avg Work Hours
      { wch: 15 }, // Active Sessions
    ];
    XLSX.utils.book_append_sheet(wb, deptWs, "📈 Department Analysis");

    // Create employee summary sheet
    const empSummary = createEmployeeSummary(data);
    const empWs = XLSX.utils.json_to_sheet(empSummary);
    empWs["!cols"] = [
      { wch: 15 }, // Employee Code
      { wch: 25 }, // Employee Name
      { wch: 20 }, // Department
      { wch: 15 }, // Total Sessions
      { wch: 18 }, // Total Work Hours
      { wch: 15 }, // Avg Daily Hours
    ];
    XLSX.utils.book_append_sheet(wb, empWs, "👥 Employee Summary");

    // Create time analysis sheet
    const timeAnalysis = createTimeAnalysis(data);
    const timeWs = XLSX.utils.json_to_sheet(timeAnalysis);
    timeWs["!cols"] = [
      { wch: 12 }, // Date
      { wch: 15 }, // Total Check-ins
      { wch: 15 }, // Total Check-outs
      { wch: 18 }, // Total Work Hours
      { wch: 15 }, // Avg Hours/Employee
    ];
    XLSX.utils.book_append_sheet(wb, timeWs, "⏰ Time Analysis");

    // Write file with proper error handling
    XLSX.writeFile(wb, `${filename}.xlsx`);
    return true;
  } catch (error) {
    console.error("Excel generation error:", error);
    throw new Error("Failed to generate Excel file. Please try again.");
  }
}

// Helper functions for Excel analysis
function calculateAverageHours(data: any[]): string {
  const validHours = data
    .filter(
      (d) => d["Work Hours"] !== "Active" && d["Work Hours"] !== "Still Active"
    )
    .map((d) => {
      const hours = d["Work Hours"];
      if (typeof hours === "string" && hours.includes("h")) {
        return Number.parseFloat(hours.replace("h", ""));
      }
      return 0;
    })
    .filter((h) => h > 0);

  if (validHours.length === 0) return "0.0h";
  const avg = validHours.reduce((sum, h) => sum + h, 0) / validHours.length;
  return `${avg.toFixed(1)}h`;
}

function getDepartmentBreakdown(data: any[]): string[][] {
  const deptCounts: Record<string, number> = {};
  data.forEach((d) => {
    const dept = d.Department || "Unknown";
    deptCounts[dept] = (deptCounts[dept] || 0) + 1;
  });

  return Object.entries(deptCounts).map(([dept, count]) => [
    dept,
    count.toString(),
  ]);
}

function createDepartmentAnalysis(data: any[]) {
  const deptStats: Record<string, any> = {};

  data.forEach((record) => {
    const dept = record.Department || "Unknown";
    if (!deptStats[dept]) {
      deptStats[dept] = {
        totalRecords: 0,
        employees: new Set(),
        workHours: [],
        activeSessions: 0,
      };
    }

    deptStats[dept].totalRecords++;
    deptStats[dept].employees.add(record["Employee Code"]);

    if (
      record["Work Hours"] === "Active" ||
      record["Work Hours"] === "Still Active"
    ) {
      deptStats[dept].activeSessions++;
    } else if (
      typeof record["Work Hours"] === "string" &&
      record["Work Hours"].includes("h")
    ) {
      const hours = Number.parseFloat(record["Work Hours"].replace("h", ""));
      if (hours > 0) deptStats[dept].workHours.push(hours);
    }
  });

  return Object.entries(deptStats).map(([dept, stats]) => ({
    Department: dept,
    "Total Records": stats.totalRecords,
    "Unique Employees": stats.employees.size,
    "Avg Work Hours":
      stats.workHours.length > 0
        ? `${(
            stats.workHours.reduce((sum: number, h: number) => sum + h, 0) /
            stats.workHours.length
          ).toFixed(1)}h`
        : "0.0h",
    "Active Sessions": stats.activeSessions,
  }));
}

function createEmployeeSummary(data: any[]) {
  const empStats: Record<string, any> = {};

  data.forEach((record) => {
    const empCode = record["Employee Code"];
    if (!empStats[empCode]) {
      empStats[empCode] = {
        name: record["Employee Name"],
        department: record.Department,
        sessions: 0,
        workHours: [],
      };
    }

    empStats[empCode].sessions++;

    if (
      record["Work Hours"] &&
      record["Work Hours"] !== "Active" &&
      record["Work Hours"] !== "Still Active" &&
      typeof record["Work Hours"] === "string" &&
      record["Work Hours"].includes("h")
    ) {
      const hours = Number.parseFloat(record["Work Hours"].replace("h", ""));
      if (hours > 0) empStats[empCode].workHours.push(hours);
    }
  });

  return Object.entries(empStats).map(([empCode, stats]) => ({
    "Employee Code": empCode,
    "Employee Name": stats.name,
    Department: stats.department,
    "Total Sessions": stats.sessions,
    "Total Work Hours":
      stats.workHours.length > 0
        ? `${stats.workHours
            .reduce((sum: number, h: number) => sum + h, 0)
            .toFixed(1)}h`
        : "0.0h",
    "Avg Daily Hours":
      stats.workHours.length > 0
        ? `${(
            stats.workHours.reduce((sum: number, h: number) => sum + h, 0) /
            stats.workHours.length
          ).toFixed(1)}h`
        : "0.0h",
  }));
}

function createTimeAnalysis(data: any[]) {
  const dateStats: Record<string, any> = {};

  data.forEach((record) => {
    const checkInDate = new Date(record["Check In"]).toDateString();
    if (!dateStats[checkInDate]) {
      dateStats[checkInDate] = {
        checkIns: 0,
        checkOuts: 0,
        workHours: [],
        employees: new Set(),
      };
    }

    dateStats[checkInDate].checkIns++;
    dateStats[checkInDate].employees.add(record["Employee Code"]);

    if (record["Check Out"] && record["Check Out"] !== "Still Active") {
      dateStats[checkInDate].checkOuts++;
    }

    if (
      record["Work Hours"] &&
      record["Work Hours"] !== "Active" &&
      record["Work Hours"] !== "Still Active" &&
      typeof record["Work Hours"] === "string" &&
      record["Work Hours"].includes("h")
    ) {
      const hours = Number.parseFloat(record["Work Hours"].replace("h", ""));
      if (hours > 0) dateStats[checkInDate].workHours.push(hours);
    }
  });

  return Object.entries(dateStats).map(([date, stats]) => ({
    Date: date,
    "Total Check-ins": stats.checkIns,
    "Total Check-outs": stats.checkOuts,
    "Total Work Hours":
      stats.workHours.length > 0
        ? `${stats.workHours
            .reduce((sum: number, h: number) => sum + h, 0)
            .toFixed(1)}h`
        : "0.0h",
    "Avg Hours/Employee":
      stats.workHours.length > 0
        ? `${(
            stats.workHours.reduce((sum: number, h: number) => sum + h, 0) /
            stats.employees.size
          ).toFixed(1)}h`
        : "0.0h",
  }));
}

// Keep existing CSV and JSON functions
export function downloadCSV(data: any[], filename: string) {
  const headers = Object.keys(data[0] || {});
  const csvContent = [
    headers.join(","),
    ...data.map((row) =>
      headers
        .map((header) => {
          const value = row[header];
          return typeof value === "string"
            ? `"${value.replace(/"/g, '""')}"`
            : value;
        })
        .join(",")
    ),
  ].join("\n");

  const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
  const link = document.createElement("a");
  const url = URL.createObjectURL(blob);
  link.setAttribute("href", url);
  link.setAttribute("download", `${filename}.csv`);
  link.style.visibility = "hidden";
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

export function downloadJSON(data: any[], filename: string) {
  const jsonContent = JSON.stringify(data, null, 2);
  const blob = new Blob([jsonContent], { type: "application/json" });
  const link = document.createElement("a");
  const url = URL.createObjectURL(blob);
  link.setAttribute("href", url);
  link.setAttribute("download", `${filename}.json`);
  link.style.visibility = "hidden";
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}
